# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: ECR Build

on:
  workflow_dispatch:
    inputs:
      PRODUCT:
        description: "배포 대상 프로덕트"
        required: true
        type: choice
        options:
        - "auth"
        - "orders"
        - "products"
      VERSION:
        description: "배포 버전"
        required: true
        type: string
      AWS_REGION:
        description: "AWS 리전"
        required: true
        type: choice
        options:
        - "ap-northeast-3"
      ASSUME_ROLE:
        description: "AWS Assume Role"
        required: true
        type: choice
        options:
        - "arn:aws:iam::721153385053:role/dev-github-actions-ci-role"
                
jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      id-token: write
    env:
      SERVICE: "auth"
      NODE_ENV: "development"
      PORT: "3001"
      JWT_SECRET: "secret"
      POSTGRES_URL: "postgres://postgres:postgres@postgres.database.svc.cluster.local:5432/postgres"

    steps:
    - name: Git Clone
      uses: actions/checkout@v3
#      with:
#        ref: ${{ inputs.VERSION }}

    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-region: ${{ inputs.AWS_REGION }}
        role-to-assume: ${{ inputs.ASSUME_ROLE }}
        # role-session-name: dev-packer-github-packer-role

    - name: Setup Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
  
    - name: Build, tag, and push docker image to Amazon ECR
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: "ekstest/${{ inputs.PRODUCT }}"
        IMAGE_TAG: ${{ inputs.VERSION }}
      run: |
        cd ${{ inputs.PRODUCT }}
        docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
        docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
  